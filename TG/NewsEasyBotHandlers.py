# pars/TG/NewsEasyBotHandlers.py
import time
import sys
import os


sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from DB.manageDB import search_news_by_keyword
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

from TG import NewsEasyBotKeyboards as kb
from DB.manageDB import get_news, get_news_count, get_news_by_source

router = Router()

# –•—Ä–∞–Ω–∏–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_news_messages = {}

# ----------------
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{message.from_user.username}!</b>", parse_mode="html",
                        reply_markup=kb.start)


# ----------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ReplyKeyboard (–ù–æ–≤–æ—Å—Ç–∏)
@router.message(F.text == "üì∞–ù–æ–≤–æ—Å—Ç–∏üì∞")
async def info(message: Message):
    await message.reply("<b>üè°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="html", reply_markup=kb.main)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ReplyKeyboard (–û –Ω–∞—Å)
@router.message(F.text == "üí°–û –Ω–∞—Åüí°")
async def onas(message: Message):
    await message.reply("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Pythonists")


# ----------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data Inline-–∫–Ω–æ–ø–æ–∫ (main)
@router.callback_query(F.data == "smotr")
async def show_news(callback: CallbackQuery):
    await show_news_with_filter(callback, source=None)


@router.callback_query(F.data == "sort")
async def callback_sort(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.sort)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "ist")
async def callback_sources(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üì∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>", 
        parse_mode="html", 
        reply_markup=kb.sources
    )


@router.callback_query(F.data == "source_lenta")
async def show_lenta_news(callback: CallbackQuery):
    await show_news_with_filter(callback, source="Lenta.ru")


@router.callback_query(F.data == "source_interfax")
async def show_interfax_news(callback: CallbackQuery):
    await show_news_with_filter(callback, source="Interfax.ru")


@router.callback_query(F.data == "source_rbk")
async def show_rbk_news(callback: CallbackQuery):
    await show_news_with_filter(callback, source="–†–ë–ö –ù–æ–≤–æ—Å—Ç–∏")



async def show_news_with_filter(callback: CallbackQuery, source=None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
    if source:
        await callback.message.edit_text(f"<b>üëÄ –ù–æ–≤–æ—Å—Ç–∏ {source}</b>", parse_mode="html")
        message_text = f"–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {source}..."
    else:
        await callback.message.edit_text("<b>üëÄ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏</b>", parse_mode="html")
        message_text = "–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –í–∞–º –≤—Å–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏..."
    
    await callback.message.answer(message_text)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    if source:
        news = get_news_by_source(source)
        total_news = len(news)  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    else:
        news = get_news()
        total_news = get_news_count()
    
    total_pages = (total_news + 9) // 10  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö

    if not news:
        await callback.message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç :(")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    sent_messages = []
    for item in news:
        news_text = f"<b>{item['category'].capitalize()}</b>\n"
        news_text += f"<i>{item['date']}</i> | {item['ist']}\n"
        news_text += f"<b>{item['short_text']}</b>\n"
        news_text += f"{item['content'][:200]}...\n" if len(item['content']) > 200 else f"{item['content']}\n"
        news_text += f"<a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"

        msg = await callback.message.answer(news_text, parse_mode="HTML")
        sent_messages.append(msg.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_id = callback.from_user.id
    user_news_messages[user_id] = sent_messages

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        pagination_msg = await callback.message.answer(
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}",
            reply_markup=kb.get_pagination_keyboard(0, total_pages, source)
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        user_news_messages[user_id].append(pagination_msg.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("next_"))
async def next_page(callback: CallbackQuery):
    data_parts = callback.data.split("_")
    page = int(data_parts[1])
    source = data_parts[2] if len(data_parts) > 2 and data_parts[2] != "None" else None
    
    await handle_pagination(callback, page, "next", source)


@router.callback_query(F.data.startswith("prev_"))
async def prev_page(callback: CallbackQuery):
    data_parts = callback.data.split("_")
    page = int(data_parts[1])
    source = data_parts[2] if len(data_parts) > 2 and data_parts[2] != "None" else None
    
    await handle_pagination(callback, page, "prev", source)


async def handle_pagination(callback: CallbackQuery, page: int, direction: str, source: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in user_news_messages:
        for msg_id in user_news_messages[user_id]:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        del user_news_messages[user_id]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if direction == "next":
        new_page = page + 1
        offset = new_page * 10
    else:
        new_page = page - 1
        offset = new_page * 10

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if source:
        all_news = get_news_by_source(source)
        total_news = len(all_news)
        # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–µ–ª–∞–µ–º —Ä—É—á–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        news = all_news[offset:offset + 10]
    else:
        news = get_news(offset=offset)
        total_news = get_news_count()
    
    total_pages = (total_news + 9) // 10

    if not news:
        await callback.answer("–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    sent_messages = []
    for item in news:
        news_text = f"<b>{item['category'].capitalize()}</b>\n"
        news_text += f"<i>{item['date']}</i> | {item['ist']}\n"
        news_text += f"<b>{item['short_text']}</b>\n"
        news_text += f"{item['content'][:200]}...\n" if len(item['content']) > 200 else f"{item['content']}\n"
        news_text += f"<a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"

        msg = await callback.message.answer(news_text, parse_mode="HTML")
        sent_messages.append(msg.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_news_messages[user_id] = sent_messages

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        pagination_msg = await callback.message.answer(
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page + 1} –∏–∑ {total_pages}",
            reply_markup=kb.get_pagination_keyboard(new_page, total_pages, source)
        )
        user_news_messages[user_id].append(pagination_msg.message_id)
    
    await callback.answer()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
@router.callback_query(F.data == "news")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ(–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏)", parse_mode="html", reply_markup=kb.back2)




@router.callback_query(F.data == "oba")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ(—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)", parse_mode="html",
                                     reply_markup=kb.back1)


@router.callback_query(F.data == "back")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üè°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: </b>", parse_mode="html", reply_markup=kb.main)


@router.callback_query(F.data == "back1")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.sort)


@router.callback_query(F.data == "back2")
async def callback_data(callback: CallbackQuery):
    await callback.message.edit_text("<b>üîé–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>", parse_mode="html", reply_markup=kb.main)


@router.callback_query(F.data == "kluch")
async def search_by_keyword(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ üîé",
        parse_mode="html",
        reply_markup=kb.back1
    )

# —à–∞–≥ 2 ‚Äî –∂–¥—ë–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message()
async def keyword_input(message: Message):
    keyword = message.text.strip()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
    if len(keyword) < 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ üîé")
        return

    # –∏—â–µ–º –≤ –ë–î
    results = search_news_by_keyword(keyword, limit=5)

    if not results:
        await message.answer(
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É <b>{keyword}</b> –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî",
            parse_mode="html",
            reply_markup=kb.back1
        )
        return

    # —Å–æ–±–∏—Ä–∞–µ–º –≤—ã–¥–∞—á—É
    text = "\n\n".join([
        f"<b>{n['short_text']}</b>\n–ò—Å—Ç–æ—á–Ω–∏–∫: {n['ist']}\n{n['link']}"
        for n in results
    ])

    await message.answer(
        text,
        parse_mode="html",
        reply_markup=kb.back1
    )